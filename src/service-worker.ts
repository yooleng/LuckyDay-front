/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// App Shell-style routing for index.html shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");

registerRoute(({ request, url }: { request: Request; url: URL }) => {
  if (request.mode !== "navigate") {
    return false;
  }
  if (url.pathname.startsWith("/_")) {
    return false;
  }
  if (url.pathname.match(fileExtensionRegexp)) {
    return false;
  }
  return true;
}, createHandlerBoundToURL(import.meta.env.VITE_BASE_URL + "/index.html"));

// Runtime caching for same-origin .png requests
registerRoute(
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"),
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [new ExpirationPlugin({ maxEntries: 50 })],
  })
);

// Exclude Kakao API requests from being cached
registerRoute(
  ({ url }) =>
    url.origin.includes("kauth.kakao.com") ||
    url.origin.includes("kapi.kakao.com"),
  new StaleWhileRevalidate({
    cacheName: "kakao-api",
    plugins: [new ExpirationPlugin({ maxEntries: 0 })], // Ensure Kakao requests are not cached
  })
);

// Skip waiting when a new service worker is activated
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});
